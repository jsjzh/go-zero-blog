// Code generated by goctl. DO NOT EDIT!

package article

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleFieldNames          = builder.RawFieldNames(&Article{})
	articleRows                = strings.Join(articleFieldNames, ",")
	articleRowsExpectAutoSet   = strings.Join(stringx.Remove(articleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	articleRowsWithPlaceHolder = strings.Join(stringx.Remove(articleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	articleModel interface {
		Insert(ctx context.Context, data *Article) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Article, error)
		Update(ctx context.Context, data *Article) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Article struct {
		Id            int64        `db:"id"`              // primary key
		Title         string       `db:"title"`           // 文章标题
		Content       string       `db:"content"`         // 文章内容
		ArticleTypeId int64        `db:"article_type_id"` // 文章类型
		CreatedAt     time.Time    `db:"created_at"`      // 创建时间
		UpdatedAt     time.Time    `db:"updated_at"`      // 更新时间
		DeletedAt     sql.NullTime `db:"deleted_at"`      // 删除时间
	}
)

func newArticleModel(conn sqlx.SqlConn) *defaultArticleModel {
	return &defaultArticleModel{
		conn:  conn,
		table: "`article`",
	}
}

func (m *defaultArticleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleModel) FindOne(ctx context.Context, id int64) (*Article, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleRows, m.table)
	var resp Article
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleModel) Insert(ctx context.Context, data *Article) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, articleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content, data.ArticleTypeId, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	return ret, err
}

func (m *defaultArticleModel) Update(ctx context.Context, data *Article) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content, data.ArticleTypeId, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Id)
	return err
}

func (m *defaultArticleModel) tableName() string {
	return m.table
}
