// Code generated by goctl. DO NOT EDIT!

package article_type

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleTypeFieldNames          = builder.RawFieldNames(&ArticleType{})
	articleTypeRows                = strings.Join(articleTypeFieldNames, ",")
	articleTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(articleTypeFieldNames, "`id`", "`create_time`", "`update_time`", "`created_at`", "`updated_at`", "`is_deleted`"), ",")
	articleTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(articleTypeFieldNames, "`id`", "`create_time`", "`update_time`", "`created_at`", "`updated_at`", "`is_deleted`"), "=?,") + "=?"
)

type (
	articleTypeModel interface {
		Insert(ctx context.Context, data *ArticleType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleType, error)
		FindOneByCode(ctx context.Context, code string) (*ArticleType, error)
		Update(ctx context.Context, data *ArticleType) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleTypeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ArticleType struct {
		Id        int64     `db:"id"`         // id
		Code      string    `db:"code"`       // primary key
		Name      string    `db:"name"`       // 类型
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
		IsDeleted int64     `db:"is_deleted"` // 0:未删除 1:已删除
	}
)

func newArticleTypeModel(conn sqlx.SqlConn) *defaultArticleTypeModel {
	return &defaultArticleTypeModel{
		conn:  conn,
		table: "`article_type`",
	}
}

func (m *defaultArticleTypeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set is_deleted = 1 where `id` = ? and is_deleted != 1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleTypeModel) FindOne(ctx context.Context, id int64) (*ArticleType, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and is_deleted != 1 limit 1", articleTypeRows, m.table)
	var resp ArticleType
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleTypeModel) FindOneByCode(ctx context.Context, code string) (*ArticleType, error) {
	var resp ArticleType
	query := fmt.Sprintf("select %s from %s where `code` = ? and is_deleted != 1 limit 1", articleTypeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleTypeModel) Insert(ctx context.Context, data *ArticleType) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, articleTypeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.CreatedAt, data.UpdatedAt, data.IsDeleted)
	return ret, err
}

func (m *defaultArticleTypeModel) Update(ctx context.Context, newData *ArticleType) error {
	query := fmt.Sprintf("update %s set %s where `id` = ? and is_deleted != 1", m.table, articleTypeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Code, newData.Name, newData.CreatedAt, newData.UpdatedAt, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultArticleTypeModel) tableName() string {
	return m.table
}
